<div class="ui sixteen column grid">
    <div class="sixteen wide column">
        <div class="ui breadcrumb">
          <%= link_to "Docs", docs_path, class: "section" %>
          <div class="divider"> / </div>
          <div class="section">Card</div>
        </div>
        <h1 class="ui header" style="margin-top: 10px;">
            Build your own Card
        </h1>
        <div class="ui divider"></div>
        <p>Developers (Pykih or third party) can build their own cards. Each card is a front-end app developed in an independent GitHub repository using <a href="https://facebook.github.io/react/" target="_blank">ReactJS framework</a>.</p>
        <p>The developer must adhere to ProtoGraph's card definition of done that is listed below. Once the card has been developed, the developer must submit the card to Pykih for review. Once Pykih verified the card, the card will be installed on ProtoGraph for use.</p>
        <h2 class="ui header">Definition of Done</h2>
        <h3 class="ui header">1. Naming the card app</h3>
        <p>One can name private cards as one wants. However, if the card is public i.e. you want to allow others to create content using your cards, then the name of the card should be "to" plus "Purpose". Below are some examples:</p>
        <ul>
            <li>toSocial</li>
            <li>toQuiz</li>
            <li>toReportViolence</li>
            <li>toExplain</li>
            <li>toHeadline</li>
        </ul>
        <h3 class="ui header">2. Recommended version numbers</h3>
        <p>The first version of the card will always be `0.0.1`</p>
        <p>Till the current version is published, there is no need to update the version number. Once the card is published, there can be following updates:</p>
        <ul>
            <li><u>Bug fixes</u>: Past deployments in same version series + Under drafting but not published + New drafts(`0.0.1` -> `0.0.2`)</li>
            <li><u>Minor upgrades</u>: Under drafting but not published + New drafts(`0.0.1` -> `0.1.0`)</li>
            <li><u>Major upgrades</u>: New drafts (not backward compatibility)(`1.0.0` -> `2.0.0`)</li>
        </ul>
        <h3 class="ui header">3. Create JSON Schema</h3>
        <p>Each card must have a <a href="http://json-schema.org" target="_blank">JSON Schema</a>. ProtoGraph will use the JSON Schema file to validate JSON documents when cards are created via a form by a person or programatically via API.</p>
        <ul>
            <li>We store all JSON Schema's in a public GitHub repository. Fork this repository - <a href="https://github.com/pykih/ProtoGraph.Schemas" target="_blank">https://github.com/pykih/ProtoGraph.Schemas</a>.</li>
            <li>Create your card folder at the root level. Eg: `toCard`. </li>
            <li>Add version folder. The default folder will be `0.0.1`.</li>
            <li>Add your `schema.json`, `sample.json` and `package.json` inside the version folder.</li>
            <li>Push the code to your branch.</li>
            <li>Generate a pull request to https://github.com/pykih/ProtoGraph.Schemas to review.</li>
        </ul>
        <p>ProtoGraph will upload the schema to CDN.</p>
        <table class="ui table">
            <thead>
                <tr>
                    <th class="collapsing">File name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>schema.json</td>
                    <td></td>
                </tr>
                <tr>
                    <td>sample.json</td>
                    <td>`data` and `mandatory_config`</td>
                </tr>
                <tr>
                    <td>package.json</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
        <h3 class="ui header">4. Create a new GitHub Repository</h3>
        <p>Create a new repository. Initialise ReactJS app.</p>
        <p>Below are some open source GitHub card repositories that you can read for inspiration.</p>
        <ul>
            <li><a target="_blank" href="https://github.com/icfjknightfellows/ProtoGraph.Card.toExplain">GitHub.com/icfj...toExplain</a></li>
            <li><a target="_blank" href="https://github.com/icfjknightfellows/ProtoGraph.Card.toReportViolence">GitHub.com/icfj...toReportViolence</a></li>
            <li><a target="_blank" href="https://github.com/icfjknightfellows/ProtoGraph.Card.toSocial">GitHub.com/icfj...toSocial</a></li>
            <li><a target="_blank" href="https://github.com/icfjknightfellows/ProtoGraph.Card.toQuiz">GitHub.com/icfj...toQuiz</a></li>
        </ul>
        <h3 class="ui header">5. Development</h3>
        <p>The development is broken down into 3 parts:</p>
        <ul>
            <li><p><u>The card application (card-name.jsx)</u>: This react application holds the logic of the card. It should expose following function</p>
                <input type="checkbox" name="" value="init"> init - it accepts 5 paramenters
                <ul>
                    <li>selector</li>
                    <li>data_url</li>
                    <li>schema_url</li>
                    <li>configuration_schema_url</li>
                    <li>configuration_url</li>
                </ul>
                <br>
                <input type="checkbox" name="" value="init"> renderLaptop - logic of how the card will look in laptop will go here.<br><br>
                <input type="checkbox" name="" value="init"> renderMobile - logic of how the card will look in mobile will go here. <br><br>
                <input type="checkbox" name="" value="init"> renderScreenshot 
                <ul>
                    <li>The content will be appended to a parent div with id='ProtoScreenshot'. The phantomjs program will be taking a snapshot of this div.</li>
                    <li>The dimensions of the div should be 450*450 with 10px 15px padding.</li>
                    <li>All the content that needs to be shown should be fitted inside of the parent div.</li>
                    <li>Overflow should be hidden.</li>
                    <li>configuration_url</li>
                </ul>
                <br>
            </li>
            <li><p><u>The edit-card application (edit_card-name.jsx)</u>: This react application holds the logic for WYSIWYG form. In addition to above functions, the edit file will expose following functions:</p>
                <input type="checkbox" name="" value="init"> exportData - This function should return following keys
                <ul>
                    <li>dataJSON</li>
                    <li>schemaJSON</li>
                    <li>optionalConfigJSON</li>
                    <li>optionalConfigSchemaJSON</li>
                    <li>name</li>
                </ul>
                <br>
                <input type="checkbox" name="" value="init"> renderEdit - This function holds the logic of the form. <br><br>
                <input type="checkbox" name="" value="init"> renderSEO - This function should return all the content of the card inside blockquote tag.<br><br>
            </li>
            <li><p><u>Support for iFrames</u> :<br><br>
                <input type="checkbox" name="" value="init"> Call the viewcast API inside the index.html. If response is successful then call the init function of card.<br><br>
                <input type="checkbox" name="" value="init"> Add the code for Consumer in order to use the reSize service provided by ProtoGraph.js<br><br>
            </li>
        </ul>
        <h3 class="ui header">6. Production</h3>
        <p>Each card repo should have a dist folder with the following files:</p>
        <ul>
            <li>dist</li>
            <ul>
                <li>0.0.1 //version number</li>
                <ul>
                    <li>card.min.js</li>
                    <li>edit-card.min.js</li>
                    <li>card.min.css</li>
                    <li>configuration_schema.json //schema for optional configuration</li>
                    <li>configuration_sample.json //optional configuration of the card</li>
                    <li>index.html</li>
                    <li>protograph.html //standalone iframable page</li>
                    <li>card.ai</li>
                    <li>card.png</li>
                    <li>static_image.png //sprite image that is used in the card</li>
                </ul>
            </ul>
        </ul>
        <p><%= link_to "< Back to Docs", docs_path %> </p>
    </div>
</div>